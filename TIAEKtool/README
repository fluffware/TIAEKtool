This is a tool to build a preset and alarm systems for PLC-programs written using Siemens TIA Portal.
It connects to TIA Portal using TIA Openness.



All presets belong to a group. If no group is given explicitly the group is "main". In the following <group> should be replaced with the specific group name.


Two type are generated for each group called "PresetValueType_<group>" and PresetEnableType_<group>.
"PresetValueType_<group>" is a struct containing values for all presets. The first level of members are the names of the global DBs that contain the presets.
"PresetEnableType_<group>" has a bool for each preset indicating wether it should be recalled or not.

All generated DBs are created in the "Preset" block-group.
Two code blocks are generated for each group are named "PresetStore_<group>" and "PresetRecall_<group>".
"PresetStore_<group>" copies values from the preset tags into a struct of type "PresetValueType_<group>".
"PresetStoreEnabled_<group>" copies values from the preset tags into a struct of type "PresetValueType_<group>", but only if the corresponding bit is set in the Enable parameter.
"PresetRecall_<group>" copies values from a struct of type "PresetValueType_<group>" to the various tags, but only if the corresponding enable bit is set.


To define which tags can have preset values, specially formated comments are used.
The general format for an annotaion in a comment is:
@{<annotaion type> <annotaion data>}
<annotaion type> may contain ASCII alphanumerics and '_'. First character can not be a digit.
Any occurance of '}' inside the annotation must be preceeded by '\'. 

A comment may (and often do) contain multiple annotations. Any text outside annotations is ignored.

The available annotaions are:
@{preset [group]: <description>}
If the group is omitted then i defaults to "main". The description is a text suitable to present to the user.

@{preset_default <default value>}
Default value for this preset.

@{preset_nostore}
Don't generate code to store the value.

@{preset_unit <unit>}
Unit for this preset

@{preset_precision <precision>}
Number of digits after decimal point for real numbers. Default is 0.

@{preset_order <order>}
The argument is an integer which assigns relative order of the presets. A lower number is presented before a higher. Default is 10000.

@{preset_min <min>}
@{preset_min <max>}
Minimum and maximum allowed value for the preset. Default is the limits for the type of the preset.

@{preset_state <value>: <Description>}
Assigns a name to a specific value for an enumerated type. If present the preset will be presented as a multiple choice between the given states.


Alarms are implemented as discrete alarms in Unified HMI.
Tags in global DBs may be turned into triggers for alarms by annotating them in the comments.

Alarm tag annotations:

@{alarm <class>: <alarm text>}
Sets alarm class and text for the alarm. Mandatory.
The language is the same as the comment.

@{alarm_text_1 <alarm text>}
@{alarm_text_2 <alarm text>}
Additional alarm texts.

@{alarm_id <id>}
ID for the alarm

@{alarm_priority <priority>}
Priority for the alarm.

@{alarm_delay <delay>}
How long the tag must be asserted before an alarm is triggered. In milliseconds.

@{alarm_edge <edge>}
Decides what edge triggers the alarm. Falling or Rising.

@{alarm_targets <target>, ... }
One or more targets separated by comma. A target is an indication of how an alarm will be used, 
either a HMI device where it will be displayed or a tag that will be set when this alarm is active.


Some tags may be marked as alarm targets. This means they are set when at least one of the alarms that have them as targets are active.
A target tag is annotated as follows:

@{alarm_target <name>:<label>}
The name is a symbolic name used when referring to this tag in a alarm_targets annotation. Label is a short descriptive text used in UI.